{"version":3,"sources":["pages/Search.js","pages/History.js","App.js","reportWebVitals.js","index.js"],"names":["Search","useState","search","setSearch","query","setQuery","useFetch","isLoading","data","stories","error","history","JSON","parse","localStorage","getItem","hits","Box","sx","display","justifyContent","Paper","component","m","p","textAlign","width","FormGroup","flexWrap","TextField","type","placeholder","onChange","event","preventDefault","userInput","target","value","toLowerCase","handleChange","Button","onClick","indexOf","push","setItem","stringify","href","map","story","mx","Card","CardContent","Typography","variant","title","story_text","url","objectID","History","storedQueries","Container","elevation","List","index","ListItem","window","location","reload","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b99abd16.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport useFetch from 'react-fetch-hook'\nimport Box from '@mui/material/Box'\nimport { Card, CardContent } from '@mui/material/'\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper'\nimport { FormGroup, Input } from '@mui/material/';\nimport TextField from '@mui/material/TextField'\n\nconst Search = () => {\n    const url = 'http://hn.algolia.com/api/v1/search_by_date?query='\n    const [search, setSearch] = useState(null)\n    const [query, setQuery] = useState(null)\n    const { isLoading, data, error } = useFetch(url + search + '&tags=story') \n    let stories = []\n    let history = JSON.parse(localStorage.getItem('stories')) || []\n\n    if (isLoading) {\n      return \"loading...\"\n    }\n\n    const handleChange = (event) => {\n        event.preventDefault()\n        let userInput = event.target.value\n        userInput.toLowerCase()\n        setQuery(userInput)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n\n        setSearch(query)\n        \n        if (history.indexOf(query) == -1){\n            history.push(query)\n            localStorage.setItem('stories', JSON.stringify(history))\n        }\n        setQuery(null)\n    }\n   \n    \n    if (search) {\n        stories = data.hits || []\n    }\n\n    return (\n        <div>\n            <Box sx={{\n                display: 'flex',\n                justifyContent: 'center'                \n            }}>\n                <Paper component=\"span\" \n                sx={{ \n                    display: 'block', \n                    m: '10px',\n                    p: '25px',\n                    justifyContent: 'center',\n                    textAlign: 'center',\n                    width: '500px'\n                }}>\n\n                <FormGroup \n                    sx={{\n                        flexWrap: 'wrap',\n                        m: '5px',\n                        p: '15px',\n                    }}>\n                    <TextField\n                        type={'text'}\n                        placeholder={'type here to search...'}\n                        onChange={(event) => {handleChange(event)}}\n                    />\n                    <Button type='button' onClick={handleSubmit}>Search</Button>\n                    <Button type='button' href='/history'>View Search History</Button>\n                </FormGroup>\n\n            </Paper>\n            </Box>\n            <Box sx={{\n                display: 'block'\n                }}>\n                {stories.map((story) => (\n                    <Paper key={story.objectID} component=\"span\" sx={{ display: 'block', mx: '2px' }}>\n                        <Card >\n                            <CardContent>\n                                <Typography variant=\"h5\" >\n                                    {story.title}\n                                </Typography>\n                                <Typography variant=\"body2\">\n                                    {story.story_text}\n                                </Typography>\n                                <Button href={story.url}>\n                                    Click to View Story\n                                </Button>\n                            </CardContent>\n                        </Card>\n                    </Paper>\n                ))}\n\n            </Box>\n        </div>\n    )\n}\n\nexport default Search","import React from 'react'\nimport { Container, Box, Paper } from '@mui/material'\nimport { List, ListItem } from '@mui/material'\nimport Button from '@mui/material/Button'\n\nconst History = () => {\n    const clearHistory = () => {\n        let history = []\n        localStorage.setItem(\"stories\", JSON.stringify(history))\n        window.location.reload()\n    }\n    const storedQueries = JSON.parse(localStorage.getItem('stories'))\n\n    return (\n        <div>\n        <Container sx={{\n            display: 'flex',\n            justifyContent: 'center',\n            textAlign: 'center'\n        }}>\n            <Paper sx={{\n                width: '500px',\n                p: '20px',\n                m: '10px'\n            }} elevation={3}>\n                <Box sx={{\n                    display: 'flex',\n                    justifyContent: 'center'\n                }}>\n                    <h2>Search History</h2>\n                </Box>\n                <Box>\n                    <List>\n                        {storedQueries.map((query, index) => (\n                        <ListItem key={index}> {query} </ListItem>\n                        ))}\n                    </List>\n                </Box>\n            <Button onClick={clearHistory} variant='outlined' sx={{mx:'7px'}}>Clear History</Button>\n            <Button href='/search' variant='outlined' sx={{mx:'7px'}}>Return to Search</Button>\n            </Paper>\n        </Container>\n\n        </div>\n    )\n}\n\nexport default History","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Search from './pages/Search'\nimport History from './pages/History'\nimport Typography from '@mui/material/Typography'\nimport Container from '@mui/material/Container'\n\nfunction App() {\n\n  return (\n    <div>\n      <Container sx={{\n        display: 'flex',\n        justifyContent: 'center'\n      }}>\n        <Typography>\n          <h1> Hacker News Search App</h1>\n        </Typography>\n      </Container>\n      \n      <Router>\n        <Switch>\n          <Route exact path='/'>\n            <Search />\n          </Route>\n          <Route exact path='/search'>\n            <Search />\n          </Route>\n          <Route exact path='/history'>\n            <History />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}