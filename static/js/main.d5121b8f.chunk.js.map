{"version":3,"sources":["pages/Search.js","pages/History.js","App.js","reportWebVitals.js","index.js"],"names":["Search","useState","search","setSearch","query","setQuery","useFetch","isLoading","data","stories","error","history","JSON","parse","localStorage","getItem","hits","console","log","Box","component","sx","display","mx","type","placeholder","onChange","event","preventDefault","userInput","target","value","toLowerCase","handleChange","onClick","indexOf","push","setItem","stringify","map","story","Card","CardContent","Typography","variant","title","story_text","Button","href","url","objectID","History","storedQueries","index","window","location","reload","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAsFeA,EA5EA,WACX,IACA,EAA4BC,mBAAS,MAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAmCC,IAHvB,qDAGsCJ,EAAS,eAAnDK,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,KACfC,GADJ,EAAyBC,MACX,IACVC,EAAUC,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,GAE7D,GAAIR,EACF,MAAO,aA8BT,OALIL,IACAO,EAAUD,EAAKQ,MAAQ,GACvBC,QAAQC,IAAIT,IAIZ,gCACI,yDACA,cAACU,EAAA,EAAD,CAAKC,UAAU,OAAOC,GAAI,CAAEC,QAAS,eAAgBC,GAAI,OAAzD,SACI,iCACI,uBACIC,KAAM,OACNC,YAAa,yBACbC,SAAU,SAACC,IAnCV,SAACA,GAClBA,EAAMC,iBACN,IAAIC,EAAYF,EAAMG,OAAOC,MAC7BF,EAAUG,cACVf,QAAQC,IAAIW,GACZxB,EAASwB,GA8B6BI,CAAaN,MAEvC,wBAAQH,KAAK,SAASU,QA7BjB,SAACP,GAClBA,EAAMC,iBAENzB,EAAUC,IAEqB,GAA3BO,EAAQwB,QAAQ/B,KAChBO,EAAQyB,KAAKhC,GACbU,aAAauB,QAAQ,UAAWzB,KAAK0B,UAAU3B,KAEnDN,EAAS,OAoBG,yBAGR,8BACKI,EAAQ8B,KAAI,SAACC,GAAD,OACT,cAACrB,EAAA,EAAD,CAA0BC,UAAU,OAAOC,GAAI,CAAEC,QAAS,eAAgBC,GAAI,OAA9E,SACI,cAACkB,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACKJ,EAAMK,QAEX,4BACKL,EAAMM,aAEX,cAACC,EAAA,EAAD,CAAQC,KAAMR,EAAMS,IAApB,uCATFT,EAAMU,mBCvCrBC,EAvBC,WACZ,IAKMC,EAAgBxC,KAAKC,MAAMC,aAAaC,QAAQ,YAEtD,OACI,gCACI,gDACA,6BACKqC,EAAcb,KAAI,SAACnC,EAAOiD,GAAR,OACf,mCAAkBjD,IAATiD,QAIjB,wBAAQnB,QAhBK,WAEjBpB,aAAauB,QAAQ,UAAWzB,KAAK0B,UADvB,KAEdgB,OAAOC,SAASC,UAaZ,+BCIGC,MAlBf,WAEE,OACE,8BACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,UAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,WAAZ,SACE,cAAC,EAAD,cCHGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d5121b8f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport useFetch from 'react-fetch-hook'\nimport Box from '@mui/material/Box'\nimport Card from '@mui/material/Card'\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\n\nconst Search = () => {\n    const url = 'http://hn.algolia.com/api/v1/search_by_date?query='\n    const [search, setSearch] = useState(null)\n    const [query, setQuery] = useState(null)\n    const { isLoading, data, error } = useFetch(url + search + '&tags=story') \n    let stories = []\n    let history = JSON.parse(localStorage.getItem('stories')) || []\n\n    if (isLoading) {\n      return \"loading...\"\n    }\n\n    const handleChange = (event) => {\n        event.preventDefault()\n        let userInput = event.target.value\n        userInput.toLowerCase()\n        console.log(userInput)\n        setQuery(userInput)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n\n        setSearch(query)\n        \n        if (history.indexOf(query) == -1){\n            history.push(query)\n            localStorage.setItem('stories', JSON.stringify(history))\n        }\n        setQuery(null)\n\n    }\n   \n    \n    if (search) {\n        stories = data.hits || []\n        console.log(stories)\n    }\n\n    return (\n        <div>\n            <h1> Hacker News Search App</h1>\n            <Box component=\"span\" sx={{ display: 'inline-block', mx: '2px' }}>\n                <form>\n                    <input\n                        type={'text'}\n                        placeholder={'type here to search...'}\n                        onChange={(event) => {handleChange(event)}}\n                    />\n                    <button type='button' onClick={handleSubmit}>Search</button>\n                </form>\n            </Box>\n            <div>\n                {stories.map((story) => (\n                    <Box key={story.objectID} component=\"span\" sx={{ display: 'inline-block', mx: '2px' }}>\n                        <Card >\n                            <CardContent>\n                                <Typography variant=\"h5\" >\n                                    {story.title}\n                                </Typography>\n                                <p>\n                                    {story.story_text}\n                                </p>\n                                <Button href={story.url}>\n                                    Click to View Story\n                                </Button>\n                            </CardContent>\n                        </Card>\n                    </Box>\n                ))}\n\n            </div>\n        </div>\n    )\n}\n\nexport default Search","import React from 'react'\n\nconst History = () => {\n    const clearHistory = () => {\n        let history = []\n        localStorage.setItem(\"stories\", JSON.stringify(history))\n        window.location.reload()\n    }\n    const storedQueries = JSON.parse(localStorage.getItem('stories'))\n\n    return (\n        <div>\n            <h1>Search History</h1>\n            <ul>\n                {storedQueries.map((query, index) => (\n                    <li key={index}> {query}</li>\n\n                ))}\n            </ul>\n            <button onClick={clearHistory}>Clear History</button>\n\n        </div>\n    )\n}\n\nexport default History","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Search from './pages/Search'\nimport History from './pages/History'\n\nfunction App() {\n\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route path='/search'>\n            <Search />\n          </Route>\n          <Route path='/history'>\n            <History />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}